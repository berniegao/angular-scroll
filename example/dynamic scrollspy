<!DOCTYPE html>
<html ng-app="myApp">
<head>
    <meta charset="UTF-8" />
    <!--[if lt IE 9]><script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script><![endif]-->
    <title>Angular Scrollspy Demo</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    @*<script src="~/Scripts/jquery-2.1.1.js"></script>*@
    @*<script src="~/Scripts/bootstrap.js"></script>*@
    <script src="~/Scripts/jquery-2.1.1.js"></script>
    <link href="~/Content/bootstrap.css" rel="stylesheet" />
    <script src="~/Scripts/bootstrap.js"></script>
    <script src="~/Scripts/jquery-2.1.1.js"></script>
    <style type="text/css">
        html, body {
            margin: 0;
            padding: 0;
            background: #ebebeb;
        }

        body, button {
            font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
        }

        h1 {
            padding-top: 50px;
        }

        img {
            max-width: 100%;
        }

        nav {
            position: fixed;
            z-index: 1;
            top: 0;
            left: 0;
            right: 0;
            background: #fff;
            background: rgba(255, 255, 255, 0.8);
        }

            nav li, nav ul {
                list-style: none;
                margin: 0;
                padding: 0;
                text-align: center;
            }

            nav li, nav a {
                display: inline-block;
            }

            nav a {
                padding: 20px;
                color: #333;
                text-decoration: none;
            }

        a:hover {
            background: #fff;
        }

        a.active {
            background: #00AC7F;
            color: #fff;
        }

        .wrap {
            position: relative;
            max-width: 1000px;
            margin: 0 auto;
            padding: 50px 20px;
        }

        section {
            padding: 50px 0 30px 0;
        }

        footer {
            text-align: center;
        }

        button {
            font-size: 18px;
            border: 0;
            padding: 15px 30px;
            background: #00AC7F;
            color: #fff;
            cursor: pointer;
        }
    </style>
</head>
<body ng-app="myApp">
    <div class="row" ng-controller="MyCtrl">
        <div class="col-md-3" >
            <input type="button" ng-click="addSection()" value="Click Me" />
            <ul id="sections" data-spy="affix"  >
                <li ng-repeat="p in sections"><a href='#{{p}}' du-scrollspy>{{p}}</a></li>
            </ul>
        </div>
        <div class="col-md-8 ">
            <h1>Angular.js Scrollspy Example</h1>
            <section id="section-1">
                <h2>Section 1</h2>
                <p>Bacon ipsum dolor sit amet sausage tail capicola ground round hamburger ham hock. Short ribs pig andouille meatball, pastrami tri-tip fatback ham hock shank kielbasa swine. Rump pancetta jerky kielbasa doner beef ribs tongue hamburger strip steak drumstick andouille shoulder shank flank. Swine drumstick meatball pig beef sausage strip steak.</p>
            </section>
            <section id="section-2">
                <h2>Section 2</h2>
                <p>Bacon strip steak ground round, tongue pastrami short ribs pork chop venison turducken sausage sirloin. Flank chicken pork chop capicola turkey turducken cow pork loin biltong meatball drumstick pancetta filet mignon ground round fatback. Ham hock jerky short ribs brisket. Meatloaf shoulder pork chop capicola, sirloin swine pig pork. Jerky ribeye hamburger pork loin sirloin kevin bresaola boudin chuck flank. Ham hock pork belly chicken jerky rump bresaola.</p>
            </section>
            <div id="section-3">
                <h2>
                    Section 3
                </h2>
                <p>Shank fatback pastrami short loin, turkey jowl kielbasa ribeye chicken jerky drumstick flank ham. Swine shankle pork belly kielbasa shoulder flank jowl, sirloin doner. Kevin tri-tip bresaola leberkas. Swine ball tip cow strip steak. Ham filet mignon pork chop, pork fatback andouille pork loin shoulder jowl swine strip steak turducken prosciutto rump.</p>
                <img src="http://lorempixel.com/1000/400/" alt="" />
                <p>Tongue tri-tip pastrami, shoulder rump pork belly ground round. Ham hock chuck leberkas doner, strip steak corned beef tri-tip capicola. Rump turkey ham sausage shankle. Flank shankle pork chop ham hock. Shankle venison kielbasa, pancetta swine beef ball tip t-bone bacon hamburger ground round ribeye flank. Turducken bacon bresaola, chicken kevin boudin ball tip strip steak filet mignon pork turkey shank ground round. Kielbasa fatback prosciutto pork chop, jerky ground round leberkas boudin ball tip beef shankle shoulder swine brisket.</p>
            </div>
            <section id="section-4">
                <h2>Section 4</h2>
                <img src="http://lorempixel.com/1000/600/" alt="" />
                <p>Shoulder cow tenderloin chuck, pork chop jerky doner leberkas. Chuck sausage hamburger, kevin beef pork chop pork shoulder ground round ball tip turducken flank. Bresaola tri-tip meatloaf, salami venison tail pig shank shankle jowl sausage brisket cow biltong turducken. Swine turducken hamburger ball tip short loin prosciutto kevin jowl tri-tip. Doner meatloaf pork brisket.</p>
            </section>
            <footer>
                <button ng-click="toTheTop()">Take me back!</button> or <button ng-click="toSection2()">To section 2</button>
            </footer>
        </div>
    </div>
    <script src="~/Scripts/angular.js"></script>
    <script>



        /**
  * x is a value between 0 and 1, indicating where in the animation you are.
  */
        var duScrollDefaultEasing = function (x) {
            'use strict';

            if (x < 0.5) {
                return Math.pow(x * 2, 2) / 2;
            }
            return 1 - Math.pow((1 - x) * 2, 2) / 2;
        };

        angular.module('duScroll', [
          'duScroll.scrollspy',
          'duScroll.smoothScroll',
          'duScroll.scrollContainer',
          'duScroll.spyContext',
          'duScroll.scrollHelpers'
        ])
          //Default animation duration for smoothScroll directive
          .value('duScrollDuration', 350)
          //Scrollspy debounce interval, set to 0 to disable
          .value('duScrollSpyWait', 100)
          //Wether or not multiple scrollspies can be active at once
          .value('duScrollGreedy', false)
          //Default offset for smoothScroll directive
          .value('duScrollOffset', 0)
          //Default easing function for scroll animation
          .value('duScrollEasing', duScrollDefaultEasing);


        angular.module('duScroll.scrollHelpers', ['duScroll.requestAnimation'])
        .run(["$window", "$q", "cancelAnimation", "requestAnimation", "duScrollEasing", "duScrollDuration", "duScrollOffset", function ($window, $q, cancelAnimation, requestAnimation, duScrollEasing, duScrollDuration, duScrollOffset) {
            'use strict';

            var proto = angular.element.prototype;

            var isDocument = function (el) {
                return (typeof HTMLDocument !== 'undefined' && el instanceof HTMLDocument) || (el.nodeType && el.nodeType === el.DOCUMENT_NODE);
            };

            var isElement = function (el) {
                return (typeof HTMLElement !== 'undefined' && el instanceof HTMLElement) || (el.nodeType && el.nodeType === el.ELEMENT_NODE);
            };

            var unwrap = function (el) {
                return isElement(el) || isDocument(el) ? el : el[0];
            };

            proto.scrollTo = function (left, top, duration, easing) {
                var aliasFn;
                if (angular.isElement(left)) {
                    aliasFn = this.scrollToElement;
                } else if (duration) {
                    aliasFn = this.scrollToAnimated;
                }
                if (aliasFn) {
                    return aliasFn.apply(this, arguments);
                }
                var el = unwrap(this);
                if (isDocument(el)) {
                    return $window.scrollTo(left, top);
                }
                el.scrollLeft = left;
                el.scrollTop = top;
            };

            var scrollAnimation, deferred;
            proto.scrollToAnimated = function (left, top, duration, easing) {
                if (duration && !easing) {
                    easing = duScrollEasing;
                }
                var startLeft = this.scrollLeft(),
                    startTop = this.scrollTop(),
                    deltaLeft = Math.round(left - startLeft),
                    deltaTop = Math.round(top - startTop);

                var startTime = null;
                var el = this;

                var cancelOnEvents = 'scroll mousedown mousewheel touchmove keydown';
                var cancelScrollAnimation = function ($event) {
                    if (!$event || $event.which > 0) {
                        el.unbind(cancelOnEvents, cancelScrollAnimation);
                        cancelAnimation(scrollAnimation);
                        deferred.reject();
                        scrollAnimation = null;
                    }
                };

                if (scrollAnimation) {
                    cancelScrollAnimation();
                }
                deferred = $q.defer();

                if (!deltaLeft && !deltaTop) {
                    deferred.resolve();
                    return deferred.promise;
                }

                var animationStep = function (timestamp) {
                    if (startTime === null) {
                        startTime = timestamp;
                    }

                    var progress = timestamp - startTime;
                    var percent = (progress >= duration ? 1 : easing(progress / duration));

                    el.scrollTo(
                      startLeft + Math.ceil(deltaLeft * percent),
                      startTop + Math.ceil(deltaTop * percent)
                    );
                    if (percent < 1) {
                        scrollAnimation = requestAnimation(animationStep);
                    } else {
                        el.unbind(cancelOnEvents, cancelScrollAnimation);
                        scrollAnimation = null;
                        deferred.resolve();
                    }
                };

                //Fix random mobile safari bug when scrolling to top by hitting status bar
                el.scrollTo(startLeft, startTop);

                el.bind(cancelOnEvents, cancelScrollAnimation);

                scrollAnimation = requestAnimation(animationStep);
                return deferred.promise;
            };

            proto.scrollToElement = function (target, offset, duration, easing) {
                var el = unwrap(this);
                if (!angular.isNumber(offset) || isNaN(offset)) {
                    offset = duScrollOffset;
                }
                var top = this.scrollTop() + unwrap(target).getBoundingClientRect().top - offset;
                if (isElement(el)) {
                    top -= el.getBoundingClientRect().top;
                }
                return this.scrollTo(0, top, duration, easing);
            };

            var overloaders = {
                scrollLeft: function (value, duration, easing) {
                    if (angular.isNumber(value)) {
                        return this.scrollTo(value, this.scrollTop(), duration, easing);
                    }
                    var el = unwrap(this);
                    if (isDocument(el)) {
                        return $window.scrollX || document.documentElement.scrollLeft || document.body.scrollLeft;
                    }
                    return el.scrollLeft;
                },
                scrollTop: function (value, duration, easing) {
                    if (angular.isNumber(value)) {
                        return this.scrollTo(this.scrollTop(), value, duration, easing);
                    }
                    var el = unwrap(this);
                    if (isDocument(el)) {
                        return $window.scrollY || document.documentElement.scrollTop || document.body.scrollTop;
                    }
                    return el.scrollTop;
                }
            };

            proto.scrollToElementAnimated = function (target, offset, duration, easing) {
                return this.scrollToElement(target, offset, duration || duScrollDuration, easing);
            };

            proto.scrollTopAnimated = function (top, duration, easing) {
                return this.scrollTop(top, duration || duScrollDuration, easing);
            };

            proto.scrollLeftAnimated = function (left, duration, easing) {
                return this.scrollLeft(left, duration || duScrollDuration, easing);
            };

            //Add duration and easing functionality to existing jQuery getter/setters
            var overloadScrollPos = function (superFn, overloadFn) {
                return function (value, duration, easing) {
                    if (duration) {
                        return overloadFn.apply(this, arguments);
                    }
                    return superFn.apply(this, arguments);
                };
            };

            for (var methodName in overloaders) {
                proto[methodName] = (proto[methodName] ? overloadScrollPos(proto[methodName], overloaders[methodName]) : overloaders[methodName]);
            }
        }]);


        //Adapted from https://gist.github.com/paulirish/1579671
        angular.module('duScroll.polyfill', [])
        .factory('polyfill', ["$window", function ($window) {
            'use strict';

            var vendors = ['webkit', 'moz', 'o', 'ms'];

            return function (fnName, fallback) {
                if ($window[fnName]) {
                    return $window[fnName];
                }
                var suffix = fnName.substr(0, 1).toUpperCase() + fnName.substr(1);
                for (var key, i = 0; i < vendors.length; i++) {
                    key = vendors[i] + suffix;
                    if ($window[key]) {
                        return $window[key];
                    }
                }
                return fallback;
            };
        }]);

        angular.module('duScroll.requestAnimation', ['duScroll.polyfill'])
        .factory('requestAnimation', ["polyfill", "$timeout", function (polyfill, $timeout) {
            'use strict';

            var lastTime = 0;
            var fallback = function (callback, element) {
                var currTime = new Date().getTime();
                var timeToCall = Math.max(0, 16 - (currTime - lastTime));
                var id = $timeout(function () { callback(currTime + timeToCall); },
                  timeToCall);
                lastTime = currTime + timeToCall;
                return id;
            };

            return polyfill('requestAnimationFrame', fallback);
        }])
        .factory('cancelAnimation', ["polyfill", "$timeout", function (polyfill, $timeout) {
            'use strict';

            var fallback = function (promise) {
                $timeout.cancel(promise);
            };

            return polyfill('cancelAnimationFrame', fallback);
        }]);


        angular.module('duScroll.spyAPI', ['duScroll.scrollContainerAPI'])
        .factory('spyAPI', ["$rootScope", "$timeout", "scrollContainerAPI", "duScrollGreedy", "duScrollSpyWait", function ($rootScope, $timeout, scrollContainerAPI, duScrollGreedy, duScrollSpyWait) {
            'use strict';

            var createScrollHandler = function (context) {
                var timer = false, queued = false;
                var handler = function () {
                    queued = false;
                    var container = context.container,
                        containerEl = container[0],
                        containerOffset = 0;

                    if (typeof HTMLElement !== 'undefined' && containerEl instanceof HTMLElement || containerEl.nodeType && containerEl.nodeType === containerEl.ELEMENT_NODE) {
                        containerOffset = containerEl.getBoundingClientRect().top;
                    }

                    var i, currentlyActive, toBeActive, spies, spy, pos;
                    spies = context.spies;
                    currentlyActive = context.currentlyActive;
                    toBeActive = undefined;

                    for (i = 0; i < spies.length; i++) {
                        spy = spies[i];
                        pos = spy.getTargetPosition();
                        if (!pos) continue;

                        if (pos.top + spy.offset - containerOffset < 20 && (pos.top * -1 + containerOffset) < pos.height) {
                            if (!toBeActive || toBeActive.top < pos.top) {
                                toBeActive = {
                                    top: pos.top,
                                    spy: spy
                                };
                            }
                        }
                    }
                    if (toBeActive) {
                        toBeActive = toBeActive.spy;
                    }
                    if (currentlyActive === toBeActive || (duScrollGreedy && !toBeActive)) return;
                    if (currentlyActive) {
                        currentlyActive.$element.removeClass('active');
                        $rootScope.$broadcast('duScrollspy:becameInactive', currentlyActive.$element);
                    }
                    if (toBeActive) {
                        toBeActive.$element.addClass('active');
                        $rootScope.$broadcast('duScrollspy:becameActive', toBeActive.$element);
                    }
                    context.currentlyActive = toBeActive;
                };

                if (!duScrollSpyWait) {
                    return handler;
                }

                //Debounce for potential performance savings
                return function () {
                    if (!timer) {
                        handler();
                        timer = $timeout(function () {
                            timer = false;
                            if (queued) {
                                handler();
                            }
                        }, duScrollSpyWait, false);
                    } else {
                        queued = true;
                    }
                };
            };

            var contexts = {};

            var createContext = function ($scope) {
                var id = $scope.$id;
                var context = {
                    spies: []
                };

                context.handler = createScrollHandler(context);
                contexts[id] = context;

                $scope.$on('$destroy', function () {
                    destroyContext($scope);
                });

                return id;
            };

            var destroyContext = function ($scope) {
                var id = $scope.$id;
                var context = contexts[id], container = context.container;
                if (container) {
                    container.off('scroll', context.handler);
                }
                delete contexts[id];
            };

            var defaultContextId = createContext($rootScope);

            var getContextForScope = function (scope) {
                if (contexts[scope.$id]) {
                    return contexts[scope.$id];
                }
                if (scope.$parent) {
                    return getContextForScope(scope.$parent);
                }
                return contexts[defaultContextId];
            };

            var getContextForSpy = function (spy) {
                var context, contextId, scope = spy.$element.scope();
                if (scope) {
                    return getContextForScope(scope);
                }
                //No scope, most likely destroyed
                for (contextId in contexts) {
                    context = contexts[contextId];
                    if (context.spies.indexOf(spy) !== -1) {
                        return context;
                    }
                }
            };

            var isElementInDocument = function (element) {
                while (element.parentNode) {
                    element = element.parentNode;
                    if (element === document) {
                        return true;
                    }
                }
                return false;
            };

            var addSpy = function (spy) {
                var context = getContextForSpy(spy);
                if (!context) return;
                context.spies.push(spy);
                if (!context.container || !isElementInDocument(context.container)) {
                    if (context.container) {
                        context.container.off('scroll', context.handler);
                    }
                    context.container = scrollContainerAPI.getContainer(spy.$element.scope());
                    context.container.on('scroll', context.handler).triggerHandler('scroll');
                }
            };

            var removeSpy = function (spy) {
                var context = getContextForSpy(spy);
                if (spy === context.currentlyActive) {
                    context.currentlyActive = null;
                }
                var i = context.spies.indexOf(spy);
                if (i !== -1) {
                    context.spies.splice(i, 1);
                }
            };

            return {
                addSpy: addSpy,
                removeSpy: removeSpy,
                createContext: createContext,
                destroyContext: destroyContext,
                getContextForScope: getContextForScope
            };
        }]);


        angular.module('duScroll.scrollContainerAPI', [])
        .factory('scrollContainerAPI', ["$document", function ($document) {
            'use strict';

            var containers = {};

            var setContainer = function (scope, element) {
                var id = scope.$id;
                containers[id] = element;
                return id;
            };

            var getContainerId = function (scope) {
                if (containers[scope.$id]) {
                    return scope.$id;
                }
                if (scope.$parent) {
                    return getContainerId(scope.$parent);
                }
                return;
            };

            var getContainer = function (scope) {
                var id = getContainerId(scope);
                return id ? containers[id] : $document;
            };

            var removeContainer = function (scope) {
                var id = getContainerId(scope);
                if (id) {
                    delete containers[id];
                }
            };

            return {
                getContainerId: getContainerId,
                getContainer: getContainer,
                setContainer: setContainer,
                removeContainer: removeContainer
            };
        }]);


        angular.module('duScroll.smoothScroll', ['duScroll.scrollHelpers', 'duScroll.scrollContainerAPI'])
        .directive('duSmoothScroll', ["duScrollDuration", "duScrollOffset", "scrollContainerAPI", function (duScrollDuration, duScrollOffset, scrollContainerAPI) {
            'use strict';

            return {
                link: function ($scope, $element, $attr) {
                    $element.on('click', function (e) {
                        if (!$attr.href || $attr.href.indexOf('#') === -1) return;

                        var target = document.getElementById($attr.href.replace(/.*(?=#[^\s]+$)/, '').substring(1));
                        if (!target || !target.getBoundingClientRect) return;

                        if (e.stopPropagation) e.stopPropagation();
                        if (e.preventDefault) e.preventDefault();

                        var offset = $attr.offset ? parseInt($attr.offset, 10) : duScrollOffset;
                        var duration = $attr.duration ? parseInt($attr.duration, 10) : duScrollDuration;
                        var container = scrollContainerAPI.getContainer($scope);

                        container.scrollToElement(
                          angular.element(target),
                          isNaN(offset) ? 0 : offset,
                          isNaN(duration) ? 0 : duration
                        );
                    });
                }
            };
        }]);


        angular.module('duScroll.spyContext', ['duScroll.spyAPI'])
        .directive('duSpyContext', ["spyAPI", function (spyAPI) {
            'use strict';

            return {
                restrict: 'A',
                scope: true,
                compile: function compile(tElement, tAttrs, transclude) {
                    return {
                        pre: function preLink($scope, iElement, iAttrs, controller) {
                            spyAPI.createContext($scope);
                        }
                    };
                }
            };
        }]);


        angular.module('duScroll.scrollContainer', ['duScroll.scrollContainerAPI'])
        .directive('duScrollContainer', ["scrollContainerAPI", function (scrollContainerAPI) {
            'use strict';

            return {
                restrict: 'A',
                scope: true,
                compile: function compile(tElement, tAttrs, transclude) {
                    return {
                        pre: function preLink($scope, iElement, iAttrs, controller) {
                            iAttrs.$observe('duScrollContainer', function (element) {
                                if (angular.isString(element)) {
                                    element = document.getElementById(element);
                                }

                                element = (angular.isElement(element) ? angular.element(element) : iElement);
                                scrollContainerAPI.setContainer($scope, element);
                                $scope.$on('$destroy', function () {
                                    scrollContainerAPI.removeContainer($scope);
                                });
                            });
                        }
                    };
                }
            };
        }]);


        angular.module('duScroll.scrollspy', ['duScroll.spyAPI'])
        .directive('duScrollspy', ["spyAPI", "duScrollOffset", "$timeout", "$rootScope", function (spyAPI, duScrollOffset, $timeout, $rootScope) {
            'use strict';

            var Spy = function (targetElementOrId, $element, offset) {
                if (angular.isElement(targetElementOrId)) {
                    this.target = targetElementOrId;
                } else if (angular.isString(targetElementOrId)) {
                    this.targetId = targetElementOrId;
                }
                this.$element = $element;
                this.offset = offset;
            };

            Spy.prototype.getTargetElement = function () {
                if (!this.target && this.targetId) {
                    this.target = document.getElementById(this.targetId);
                }
                return this.target;
            };

            Spy.prototype.getTargetPosition = function () {
                var target = this.getTargetElement();
                if (target) {
                    return target.getBoundingClientRect();
                }
            };

            Spy.prototype.flushTargetCache = function () {
                if (this.targetId) {
                    this.target = undefined;
                }
            };

            return {
                link: function ($scope, $element, $attr) {
                    var href = $attr.ngHref || $attr.href;
                    var targetId;

                    if (href && href.indexOf('#') !== -1) {
                        targetId = href.replace(/.*(?=#[^\s]+$)/, '').substring(1);
                    } else if ($attr.duScrollspy) {
                        targetId = $attr.duScrollspy;
                    }
                    if (!targetId) return;

                    // Run this in the next execution loop so that the scroll context has a chance
                    // to initialize
                    $timeout(function () {
                        var spy = new Spy(targetId, $element, -($attr.offset ? parseInt($attr.offset, 10) : duScrollOffset));
                        spyAPI.addSpy(spy);

                        $scope.$on('$destroy', function () {
                            spyAPI.removeSpy(spy);
                        });
                        $scope.$on('$locationChangeSuccess', spy.flushTargetCache.bind(spy));
                        $rootScope.$on('$stateChangeSuccess', spy.flushTargetCache.bind(spy));
                    }, 0, false);
                }
            };
        }]);



        angular.module('myApp', ['duScroll']).
          controller('MyCtrl', function ($scope, $document, $compile) {
              $scope.toTheTop = function () {
                  $document.scrollTopAnimated(0).then(function () {
                      console && console.log('You just scrolled to the top!');
                  });
              }
              $scope.sections = [];
              $scope.addSection = function () {
                  $scope.sections.push("section-1");
                  $scope.sections.push("section-2");
                  $scope.sections.push("section-3");
                  $scope.sections.push("section-4");
              }
              var section2 = angular.element(document.getElementById('section-2'));
              $scope.toSection2 = function () {
                  $document.scrollToElementAnimated(section2);
              }
          }
        ).value('duScrollOffset', 30);
    </script>
</body>
</html>
